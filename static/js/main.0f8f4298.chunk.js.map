{"version":3,"sources":["api/api.ts","api/post.ts","api/users.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/Loader/Loader.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getUserPosts","userId","a","fetch","response","json","getPostDetails","postId","getUsers","PostsList","posts","selectPostId","onSelectedPostId","className","map","post","title","type","classNames","id","onClick","getPostComments","deleteComment","commentId","method","headers","addComment","newComment","body","JSON","stringify","NewCommentForm","selectedPostId","setComments","useState","newCommentName","setNewCommentName","newCommentEmail","setNewCommentEmail","newCommentBody","setNewCommentBody","handleSubmit","event","preventDefault","name","email","updateComments","onSubmit","placeholder","value","onChange","target","Loader","PostDetails","findPost","setFindPost","comments","visibleComments","setVisibleComments","commentsError","setCommentsError","useEffect","then","postDetails","getAllComments","commentsFromServer","length","clickDelete","comment","App","setPosts","users","setUsers","selectedUserId","setSelectedUserId","setSelectedPostId","postsFromServer","usersFromServer","visiblePosts","filter","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f8f4298.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\nimport { Post } from '../react-app-env';\n\nexport const getUserPosts = async (userId: number): Promise<Post[]> => {\n  let response;\n\n  if (!userId) {\n    response = await fetch(`${BASE_URL}/posts`);\n  } else {\n    response = await fetch(`${BASE_URL}/posts/${userId}`);\n  }\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n};\n","import { BASE_URL } from './api';\nimport { User } from '../react-app-env';\n\nexport const getUsers = async (): Promise<User[]> => {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport './PostsList.scss';\nimport { Post } from '../../react-app-env';\n\ninterface Props {\n  posts: Post[],\n  selectPostId: number,\n  onSelectedPostId: (postId: number) => void,\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts, selectPostId, onSelectedPostId,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>\n                {`[User #${post.userId}]:`}\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className={classNames('PostsList__button', 'button', {\n                // eslint-disable-next-line max-len\n                'PostsList__button--active': selectPostId === post.id,\n              })}\n              onClick={() => (\n                selectPostId === post.id\n                  ? onSelectedPostId(0)\n                  : onSelectedPostId(post.id))}\n            >\n              {selectPostId === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\nimport { Comment, NewComment } from '../react-app-env';\n\nexport const getPostComments\n  = async (postId: number): Promise<Comment []> => {\n    const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n    return response.json();\n  };\n\nexport const deleteComment = async (commentId: number) => {\n  const response = await fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  });\n\n  return response.json();\n};\n\nexport const addComment = async (newComment: NewComment) => {\n  const response = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    body: JSON.stringify(newComment),\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  });\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport { addComment, getPostComments } from '../../api/comments';\nimport { NewComment } from '../../react-app-env';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  selectedPostId: number,\n  setComments: (comments: NewComment[]) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId, setComments,\n}) => {\n  const [newCommentName, setNewCommentName] = useState('');\n  const [newCommentEmail, setNewCommentEmail] = useState('');\n  const [newCommentBody, setNewCommentBody] = useState('');\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newComment: NewComment = {\n      postId: selectedPostId,\n      name: newCommentName,\n      email: newCommentEmail,\n      body: newCommentBody,\n    };\n\n    await addComment(newComment);\n    const updateComments = await getPostComments(selectedPostId);\n\n    setComments(updateComments);\n\n    setNewCommentName('');\n    setNewCommentEmail('');\n    setNewCommentBody('');\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newCommentName}\n          onChange={(event) => setNewCommentName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newCommentEmail}\n          onChange={(event) => setNewCommentEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={newCommentBody}\n          onChange={(event) => setNewCommentBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\nimport { getPostDetails } from '../../api/post';\nimport { getPostComments, deleteComment } from '../../api/comments';\nimport { Post, Comment } from '../../react-app-env';\nimport './PostDetails.scss';\n\ninterface Props {\n  selectedPostId: number,\n}\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [findPost, setFindPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [visibleComments, setVisibleComments] = useState(false);\n  const [commentsError, setCommentsError] = useState(false);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(postDetails => setFindPost(postDetails));\n    setVisibleComments(false);\n    setCommentsError(false);\n  }, [selectedPostId]);\n\n  const getAllComments = async () => {\n    const commentsFromServer = await getPostComments(selectedPostId);\n\n    if (commentsFromServer.length === 0) {\n      setComments([]);\n      setCommentsError(true);\n    } else {\n      setComments(commentsFromServer);\n      setCommentsError(false);\n    }\n  };\n\n  const showComments = () => {\n    if (visibleComments) {\n      setComments([]);\n      setVisibleComments(false);\n      setCommentsError(false);\n    } else {\n      getAllComments();\n      setVisibleComments(true);\n    }\n  };\n\n  const clickDelete = async (commentId: number) => {\n    await deleteComment(commentId);\n    const updateComments = await getPostComments(selectedPostId);\n\n    setComments(updateComments);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{findPost?.body}</p>\n      </section>\n\n      {findPost ? (\n        <section className=\"PostDetails__comments\" data-cy=\"postDetails\">\n          <button\n            type=\"button\"\n            onClick={() => showComments()}\n            className=\"button\"\n          >\n            {visibleComments ? 'Hide comments' : 'Show comments'}\n          </button>\n\n          {visibleComments && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(comment => (\n                <li className=\"PostDetails__list-item\" key={comment.id}>\n                  <button\n                    type=\"button\"\n                    onClick={() => clickDelete(comment.id)}\n                    className=\"PostDetails__remove-button button\"\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n      ) : (\n        <Loader />\n      )}\n\n      {commentsError && (\n        <p className=\"PostDetails__comments--notFound\">\n          There are no comments yet &#9785;\n        </p>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            setComments={getAllComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { Post, User } from './react-app-env';\nimport { getUserPosts } from './api/post';\nimport { getUsers } from './api/users';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    getUserPosts(selectedUserId)\n      .then(postsFromServer => setPosts(postsFromServer));\n\n    getUsers()\n      .then(usersFromServer => setUsers(usersFromServer));\n  }, []);\n\n  const setPostId = (postId: number) => {\n    setSelectedPostId(postId);\n  };\n\n  const visiblePosts = posts.filter(post => {\n    if (!selectedUserId) {\n      return post;\n    }\n\n    return post.userId === selectedUserId;\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={(event) => {\n              setSelectedUserId(+event.target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={visiblePosts}\n            selectPostId={selectedPostId}\n            onSelectedPostId={setPostId}\n          />\n        </div>\n\n        {selectedPostId !== 0 && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}